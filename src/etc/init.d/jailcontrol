#!/bin/bash
### BEGIN INIT INFO
# Provides:          jailcontrol
# Required-Start:    $all
# Required-Stop:     
# X-Start-Before:    
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# X-Interactive:     false
# Short-Description: Starts/stops jails
### END INIT INFO

version="0.2.1-testing"

_echo()
{
	echo -e "$prog: $@" >&2
}

_echo_short()
{
	echo -e "$@" >&2
}

get_begin_end_tags_from_file()
{
	local file=$1
	local jail=$2
	
	begin_line_number=`cat $file | grep -En "^### jailcontrol begin: $jail\$" | head -n 1 | cut -d : -f 1`
	end_line_number=`cat $file | grep -En "^### jailcontrol end: $jail\$" | head -n 1 | cut -d : -f 1`
	
	if [ "$begin_line_number" == "" ] && [ "$end_line_number" == "" ]; then
		_echo_short "${color_default}  * No rules found in $file.${color_default}${color_default}"
		return 1
	fi
	
	if [ "$begin_line_number" != "" ] && [ "$end_line_number" == "" ]; then
		_echo_short "${color_error}  * Error: could not find \"begin\" or \"end\" tags in $file.${color_default}"
		return 1
	fi
	
	if [ $begin_line_number -ge $end_line_number ]; then
		_echo_short "${color_error}  * Error: invalid order of \"begin\" and \"end\" tags in $file.${color_default}"
		return 1
	fi
}

network_start_for_jail()
{
	local jail=$1
	local line
	
	get_begin_end_tags_from_file /etc/network/interfaces $jail
	if [ $? != 0 ]; then
		return 1
	fi
	
	cat /etc/network/interfaces | awk "NR>=$begin_line_number&&NR<=$end_line_number" | grep -E '^\s*iface ' | awk '{ print $2; }' | while read iface; do
		command="ifup $iface"
		_echo_short "  * Starting network interface: $command"
		$command
	done
}

network_stop_for_jail()
{
	local jail=$1
	local line
	
	get_begin_end_tags_from_file /etc/network/interfaces $jail
	if [ $? != 0 ]; then
		return 1
	fi
	
	cat /etc/network/interfaces | awk "NR>=$begin_line_number&&NR<=$end_line_number" | grep -E '^\s*iface ' | awk '{ print $2; }' | tac | while read iface; do
		command="ifdown $iface"
		_echo_short "  * Shutting down network interface: $command"
		$command
	done
}

fstab_start_for_jail()
{
	local jail=$1
	local line
	local mount_source
	local mount_target
	local mount_fstype
	local mount_options
	
	get_begin_end_tags_from_file /etc/fstab $jail
	if [ $? != 0 ]; then
		return 1
	fi
	
	cat /etc/fstab | awk "NR>=$begin_line_number&&NR<=$end_line_number" | grep -Ev '^\s*#|^\s*$' | while read line; do
		mount_source=`echo $line | awk '{ print $1; }'`
		mount_target=`echo $line | awk '{ print $2; }'`
		mount_fstype=`echo $line | awk '{ print $3; }'`
		mount_options=`echo $line | awk '{ print $4; }'`
		command="mount -t $mount_fstype -o $mount_options $mount_source $mount_target"
		_echo_short "  * Mounting filesystem: $command"
		$command
	done
}

fstab_stop_for_jail()
{
	local jail=$1
	local line
	local mount_target
	
	get_begin_end_tags_from_file /etc/fstab $jail
	if [ $? != 0 ]; then
		return 1
	fi
	
	cat /etc/fstab | awk "NR>=$begin_line_number&&NR<=$end_line_number" | grep -Ev '^\s*#|^\s*$' | tac | while read line; do
		mount_target=`echo $line | awk '{ print $2; }'`
		command="umount $mount_target"
		_echo_short "  * Unmounting filesystem: $command"
		$command
	done
}

# default config
base_directory="/jails"
jails=""
color_enabled=1
color_error='\033[1;31m'
color_highlight='\033[1;34m'
color_default='\033[0m'

# include config
[ -f "/etc/jailcontrol.conf" ] && . /etc/jailcontrol.conf

prog=`basename $0`

if [ "$color_enabled" != 1 ]; then
	color_error=''
	color_highlight=''
	color_defaults=''
fi

if [ `whoami` != "root" ]; then
	_echo "${color_error}Error: must be run as root.${color_default}"
	exit 1
fi

# parse parameters
operation="$1"

runlevel=`runlevel | awk '{ print $2; }'`

if [ "$2" != "" ]; then
	shift
	jails="$@"
fi

# check if operation is empty
if [ "$operation" == "" ]; then
	_echo "${color_error}Error: operation \"$operation\" not supported.${color_default}"
	exit 2
fi

if [ $? != 0 ]; then
	_echo "${color_error}Error: no jails defined!${color_default}"
	exit 3
fi

# check if operation is "stop", if so reverse the order of jails
if [ "$operation" == "stop" ]; then
	# == tac?
	jails_tmp=""
	for i in $jails; do
		jails_tmp="$i $jails_tmp"
	done
	jails="$jails_tmp"
fi

# go through the jail list and start/stop/... needed services
for i in $jails; do
	dir="$base_directory/$i"
	
	# show which jail are we handling
	_echo_short "${color_highlight}Jailcontrol: $i ($operation)${color_default}"
	
	# on start...
	if [ "$operation" == "start" ]; then
		network_start_for_jail $i
		fstab_start_for_jail $i
	fi

	# chceck wether the jail directory exists
	if [ ! -d "$dir" ]; then
		# show an error message
		_echo_short "${color_error}  * Error: \"$dir\" not found!${color_default}"
		_echo_short ""
		continue
	fi
	
	# go to that directory
	cd "$dir"
	if [ $? != 0 ]; then
		_echo_short "${color_error}  * Error: cannot enter \"$dir\"!${color_default}"
		_echo_short ""
		continue
	fi
	
	if [ "$operation" == "list" ]; then
		for j in etc/rc$runlevel.d/S*; do
			_echo_short "  /$j"
		done
	else
		for j in etc/rc$runlevel.d/S*; do
			chroot . "/$j" $operation
		done
	fi
	
	# on stop...
	if [ "$operation" == "stop" ]; then
		fstab_stop_for_jail $i
		network_stop_for_jail $i
	fi
	
	_echo_short ""
done

exit 0
